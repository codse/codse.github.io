{"version":3,"sources":["sections/Home.js","App.js","serviceWorker.js","index.js","assets/codse_logo.png"],"names":["items","title","color","ReactGA","initialize","pageview","Home","useState","current","setCurrent","controls","useAnimation","useEffect","timer","setInterval","length","clearInterval","start","marginTop","className","style","alignItems","margin","textAlign","alt","src","logo","maxWidth","width","marginBottom","div","id","animate","map","item","key","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+TAOMA,EAAQ,CACZ,CAAEC,MAAO,oBAAqBC,MAAO,WACrC,CAAED,MAAO,0BAA2BC,MAAO,WAC3C,CAAED,MAAO,2BAA4BC,MAAO,WAC5C,CAAED,MAAO,6BAA8BC,MAAO,WAC9C,CAAED,MAAO,gCAAiCC,MAAO,YAGnDC,IAAQC,WAAW,kBACnBD,IAAQE,SAAS,KAEjB,IA8DeC,EA9DF,WAAO,IAAD,EACaC,mBAAS,GADtB,mBACVC,EADU,KACDC,EADC,KAEXC,EAAWC,cAcjB,OAbAC,qBAAU,WACR,IAAMC,EAAQC,aAAY,WACxBL,GAAYD,EAAU,GAAKR,EAAMe,UAChC,KACH,OAAO,kBAAMC,cAAcH,MAC1B,CAACL,IAEJI,qBAAU,WACRF,EAASO,MAAM,CACbC,UAAsB,IAAVV,MAEb,CAACE,EAAUF,IAGZ,oCACE,6BACEW,UAAU,iCACVC,MAAO,CAAEC,WAAY,WAErB,yBAAKF,UAAU,aACb,yBACEA,UAAU,YACVC,MAAO,CAAEE,OAAQ,SAAUC,UAAW,WAEtC,yBACEC,IAAI,aACJC,IAAKC,IACLN,MAAO,CAAEO,SAAU,IAAKC,MAAO,OAAQN,OAAQ,MAEjD,wBACEH,UAAU,aACVC,MAAO,CACLlB,MAAO,UACPqB,UAAW,SACXM,aAAc,KALlB,SAUA,kBAAC,IAAOC,IAAR,CAAYC,GAAG,iBACb,yBAAKA,GAAG,YACN,kBAAC,IAAOD,IAAR,CAAYE,QAAStB,EAAUqB,GAAG,cAC/B/B,EAAMiC,KAAI,SAACC,GAAD,OACT,yBAAKC,IAAKD,EAAKjC,OACb,4BAAQmB,MAAO,CAAElB,MAAOgC,EAAKhC,QAC1BgC,EAAKjC,mBCLfmC,G,MArBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAYE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,QC3CrBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,eD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.9002ab1b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport ReactGA from 'react-ga';\n\nimport logo from 'assets/codse_logo.png';\nimport { Link } from 'react-router-dom';\n\nconst items = [\n  { title: 'we build iOS apps', color: '#5fc9f8' },\n  { title: 'we develop android apps', color: '#a4c639' },\n  { title: 'we create eCommerce apps', color: '#21759b' },\n  { title: 'we automate repeated tasks', color: '#dd4b39' },\n  { title: 'we architect software systems', color: '#ffc43e' },\n];\n\nReactGA.initialize('UA-161968662-1');\nReactGA.pageview('/');\n\nconst Home = () => {\n  const [current, setCurrent] = useState(0);\n  const controls = useAnimation();\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrent((current + 1) % items.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [current]);\n\n  useEffect(() => {\n    controls.start({\n      marginTop: -current * 60,\n    });\n  }, [controls, current]);\n\n  return (\n    <>\n      <section\n        className=\"text-center hero is-fullheight\"\n        style={{ alignItems: 'center' }}\n      >\n        <div className=\"hero-body\">\n          <div\n            className=\"container\"\n            style={{ margin: '0 auto', textAlign: 'center' }}\n          >\n            <img\n              alt=\"Codse Tech\"\n              src={logo}\n              style={{ maxWidth: 500, width: '100%', margin: 16 }}\n            />\n            <h1\n              className=\"title is-1\"\n              style={{\n                color: '#9A56B6',\n                textAlign: 'center',\n                marginBottom: 16,\n              }}\n            >\n              Codse\n            </h1>\n            <motion.div id=\"dev-container\">\n              <div id=\"dev-anim\">\n                <motion.div animate={controls} id=\"we-develop\">\n                  {items.map((item) => (\n                    <div key={item.title}>\n                      <strong style={{ color: item.color }}>\n                        {item.title}\n                      </strong>\n                    </div>\n                  ))}\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Home from 'sections/Home';\nimport ReactJob from 'sections/ReactJob';\nimport LaravelJob from 'sections/LaravelJob';\nimport ContentJob from 'sections/ContentJob';\n\n// const sections = [\n//   {\n//     name: 'Services',\n//     Component: Loadable({\n//       loader: () => import('sections/Home'),\n//       loading: () => <p>Loading</p>\n//     })\n//   },\n//   {\n//     name: 'React',\n//     Component: Loadable({\n//       loader: () => import('sections/ReactJob'),\n//       loading: () => <p>Loading</p>\n//     })\n//   },\n//   {\n//     name: 'Laravel',\n//     Component: Loadable({\n//       loader: () => import('sections/LaravelJob'),\n//       loading: () => <p>Loading</p>\n//     })\n//   },\n//   {\n//     name: 'Contact',\n//     Component: Loadable({\n//       loader: () => import('sections/Contact'),\n//       loading: () => <p>Loading</p>\n//     })\n//   }\n// ];\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        {/* <Route\n          path=\"/career/full-stack-developer\"\n          exact\n          component={LaravelJob}\n        />\n        <Route\n          path=\"/career/react-native-developer\"\n          exact\n          component={ReactJob}\n        />\n        <Route path=\"/career/content-manager\" exact component={ContentJob} /> */}\n        <Route path=\"/\" exact component={Home} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('codse-main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/codse_logo.95c46bac.png\";"],"sourceRoot":""}